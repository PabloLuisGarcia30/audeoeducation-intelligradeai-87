
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface GenerateLessonExerciseRequest {
  studentName: string;
  className: string;
  skillName: string;
  grade: string;
  subject: string;
  questionCount?: number;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Starting lesson exercise generation...');
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const requestData: GenerateLessonExerciseRequest = await req.json();
    console.log('Request data:', JSON.stringify(requestData, null, 2));

    const { studentName, className, skillName, grade, subject, questionCount = 8 } = requestData;

    // Validate required fields
    if (!studentName || !className || !skillName || !grade || !subject) {
      throw new Error('Missing required fields');
    }

    console.log(`Generating ${questionCount} questions for ${studentName} on ${skillName}`);

    // Create the prompt for OpenAI
    const prompt = `Create a practice exercise for a ${grade} ${subject} student named ${studentName} in ${className}.

Target Skill: ${skillName}

Generate exactly ${questionCount} questions that focus on this skill. The exercise should be appropriate for the grade level and help the student practice this specific skill.

Return a JSON object with this exact structure:
{
  "title": "Practice Exercise - [Skill Name]",
  "description": "A brief description of what this exercise covers",
  "skillName": "${skillName}",
  "estimatedTime": [estimated time in minutes],
  "totalPoints": [total points possible],
  "questions": [
    {
      "id": "q1",
      "question": "[Question text]",
      "type": "[multiple-choice|true-false|short-answer]",
      "points": [points for this question],
      "correctAnswer": "[correct answer]",
      "options": ["option1", "option2", "option3", "option4"] // only for multiple-choice
    }
    // ... more questions
  ]
}

Make sure:
- Questions are directly related to ${skillName}
- Difficulty is appropriate for ${grade} level
- Include a mix of question types if appropriate
- Each question has clear, correct answers
- Total points should equal the sum of individual question points
- Estimated time should be realistic (1-2 minutes per question typically)`;

    console.log('Sending request to OpenAI...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are an expert educator who creates practice exercises. Always respond with valid JSON only, no additional text or explanations.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000,
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('OpenAI API error:', response.status, errorData);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('OpenAI response received');

    const generatedContent = data.choices[0]?.message?.content;
    if (!generatedContent) {
      throw new Error('No content generated by OpenAI');
    }

    // Parse the JSON response
    let practiceTestData;
    try {
      practiceTestData = JSON.parse(generatedContent);
    } catch (parseError) {
      console.error('Failed to parse OpenAI response as JSON:', generatedContent);
      throw new Error('Invalid JSON response from OpenAI');
    }

    // Validate the structure
    if (!practiceTestData.questions || !Array.isArray(practiceTestData.questions)) {
      throw new Error('Invalid practice test structure');
    }

    console.log(`Successfully generated exercise with ${practiceTestData.questions.length} questions`);

    return new Response(JSON.stringify(practiceTestData), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-lesson-exercises function:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Check the edge function logs for more information'
      }), 
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
