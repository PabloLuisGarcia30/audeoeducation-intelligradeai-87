
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Sparkles, BookOpen, PenTool } from 'lucide-react';
import { SupercoachService } from '@/services/supercoachService';

interface AIContentGeneratorProps {
  misconceptionSubtypeId: string;
  requestedBy: 'teacher' | 'student';
  studentId?: string;
  onContentGenerated?: (content: any) => void;
  className?: string;
}

export function SupercoachAIContentGenerator({ 
  misconceptionSubtypeId, 
  requestedBy, 
  studentId,
  onContentGenerated,
  className = ''
}: AIContentGeneratorProps) {
  const [loading, setLoading] = useState(false);
  const [content, setContent] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  
  // Customization options
  const [explanationStyle, setExplanationStyle] = useState<string>('textual');
  const [difficultyLevel, setDifficultyLevel] = useState<string>('standard');
  const [includeExamples, setIncludeExamples] = useState(true);
  const [includePracticeProblems, setIncludePracticeProblems] = useState(false);
  const [customPrompt, setCustomPrompt] = useState('');

  const generateAIContent = async () => {
    setLoading(true);
    setError(null);

    try {
      const customizationOptions = {
        explanationStyle: explanationStyle as any,
        difficultyLevel: difficultyLevel as any,
        includeExamples,
        includePracticeProblems,
        customPrompt: customPrompt.trim() || undefined
      };

      const generatedContent = await SupercoachService.generateAIMiniLesson(
        misconceptionSubtypeId,
        requestedBy,
        studentId,
        customizationOptions
      );

      if (generatedContent) {
        setContent(generatedContent);
        
        if (onContentGenerated) {
          onContentGenerated(generatedContent);
        }
      } else {
        setError('Failed to generate AI content. Please try again.');
      }
    } catch (err) {
      console.error('Error generating AI content:', err);
      setError('An error occurred while generating the content.');
    } finally {
      setLoading(false);
    }
  };

  if (content) {
    return (
      <Card className={`${className} border-purple-200 bg-purple-50`}>
        <CardHeader className="pb-3">
          <div className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-purple-600" />
            <CardTitle className="text-lg text-purple-800">
              AI-Generated Content
            </CardTitle>
          </div>
          <CardDescription className="text-purple-700">
            Custom content generated by AI Supercoach
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div 
            className="prose prose-sm max-w-none text-gray-800"
            dangerouslySetInnerHTML={{ __html: content.content }}
          />
          
          {content.keyPoints && content.keyPoints.length > 0 && (
            <div className="space-y-2">
              <h4 className="font-medium text-purple-800">Key Points:</h4>
              <ul className="list-disc list-inside space-y-1 text-sm">
                {content.keyPoints.map((point: string, index: number) => (
                  <li key={index} className="text-gray-700">{point}</li>
                ))}
              </ul>
            </div>
          )}

          {content.practiceProblems && content.practiceProblems.length > 0 && (
            <div className="space-y-2">
              <h4 className="font-medium text-purple-800">Practice Problems:</h4>
              <div className="space-y-2">
                {content.practiceProblems.map((problem: string, index: number) => (
                  <div key={index} className="bg-white p-3 rounded border text-sm">
                    {problem}
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <div className="flex items-center gap-2 pt-2 border-t border-purple-200">
            <Badge variant="secondary" className="text-xs">
              <PenTool className="h-3 w-3 mr-1" />
              Generated by {requestedBy}
            </Badge>
            <Badge variant="secondary" className="text-xs">
              {new Date(content.generatedAt).toLocaleString()}
            </Badge>
          </div>

          <Button 
            variant="outline" 
            size="sm"
            onClick={() => setContent(null)}
            className="w-full"
          >
            Generate New Content
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={`${className} border-purple-200 bg-purple-50`}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-purple-600" />
          AI Content Generator
        </CardTitle>
        <CardDescription>
          Generate custom AI-powered content for this misconception
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="explanation-style">Explanation Style</Label>
            <Select value={explanationStyle} onValueChange={setExplanationStyle}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="visual">Visual</SelectItem>
                <SelectItem value="textual">Textual</SelectItem>
                <SelectItem value="step-by-step">Step-by-step</SelectItem>
                <SelectItem value="conceptual">Conceptual</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="difficulty-level">Difficulty Level</Label>
            <Select value={difficultyLevel} onValueChange={setDifficultyLevel}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="simplified">Simplified</SelectItem>
                <SelectItem value="standard">Standard</SelectItem>
                <SelectItem value="advanced">Advanced</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <Checkbox 
              id="include-examples" 
              checked={includeExamples}
              onCheckedChange={(checked) => setIncludeExamples(checked as boolean)}
            />
            <Label htmlFor="include-examples">Include examples</Label>
          </div>
          
          <div className="flex items-center space-x-2">
            <Checkbox 
              id="include-practice" 
              checked={includePracticeProblems}
              onCheckedChange={(checked) => setIncludePracticeProblems(checked as boolean)}
            />
            <Label htmlFor="include-practice">Include practice problems</Label>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="custom-prompt">Custom Instructions (Optional)</Label>
          <Textarea
            id="custom-prompt"
            placeholder="Add any specific instructions for the AI..."
            value={customPrompt}
            onChange={(e) => setCustomPrompt(e.target.value)}
            rows={3}
          />
        </div>

        {error && (
          <div className="bg-red-100 border border-red-300 text-red-700 px-3 py-2 rounded text-sm">
            {error}
          </div>
        )}

        <Button 
          onClick={generateAIContent}
          disabled={loading}
          className="w-full bg-purple-600 hover:bg-purple-700"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2" />
              Generating AI Content...
            </>
          ) : (
            <>
              <Sparkles className="h-4 w-4 mr-2" />
              Generate AI Content
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  );
}
